Title: Invenzzia_Form

----

`Invenzzia_Form` is a wrapper to the original `Zend_Form` that allows to use the Zend forms with the component engine provided by OPT. The support does not have all the planned features yet, but it is suitable for ordinary HTML forms.

Constructing forms
==================

Here we can find a sample form constructed with `Invenzzia_Form`:

~~~~
[php]
class testForm extends Invenzzia_Form
{
	/**
	 * Form constructor. Note that we do not set any decorators here,
	 * as we are using OPT to define the element layout.
	 * 
	 * @param Array $options The form options.
	 */
	public function __construct( $options = null )
	{
		parent::__construct($options);
		$email = $this->createElement( 'text', 'email' );
		$email->setLabel( 'E-mail' )
				  ->setRequired( true )
				  ->addValidator('NotEmpty')
				  ->addValidator(new Zend_Validate_EmailAddress(Zend_Validate_Hostname::ALLOW_LOCAL));
		$this->addElement($email);

		$firstname = $this->createElement( 'text', 'firstname' );
		$firstname->setLabel( 'First name' )
				  ->setRequired( true )
				  ->addValidator('NotEmpty');
		$this->addElement($firstname);

		$surname = $this->createElement( 'text', 'surname' );
		$surname->setLabel( 'Last name' )
				->setRequired( true )
				->addValidator('NotEmpty');
		$this->addElement($surname);
	} // end __construct();
} // end testForm;
~~~~

As we can see, we extend the class `Invenzzia_Form` instead of `Zend_Form`. Furthermore, we do not set any element decorators, because this is not a task for this part of the form engine. The layout of the form elements is defined in templates. However, the attributes set with `setAttrib()` and `setAttribs()` methods are respected while displaying the element.

Form template
=============

The HTML template for this form looks like this:

~~~~
[xml]
<!-- define the CSS classes used by the helpers in the "valid" and "invalid" situations -->
{@formStyleTextValid is 'foo'}
{@formStyleTextInvalid is 'bar'}

<!-- create the form -->
<form parse:method="$form.method" parse:action="url($form.action)">

	<opt:section name="fields" datasource="$form.fields">
		<opt:component from="$fields.component">
			<p>{$system.component.label}: <opt:display /></p>
			<opt:onEvent name="error">
				<p>Some errors occured:</p>
				<opt:section name="componentErrors" datasource="$componentErrors">
					<p>{$componentErrors}</p>
				</opt:section>
			</opt:onEvent>
		</opt:component>
	</opt:section>

	<p><input type="submit" value="OK" /></p>
</form>
~~~~

The form data are available through a container `$form`. The elements of the container are:

`$form.method`
:	The form method.

`$form.action`
:	The form action route data. In order to get the URL, you need to use `url()` template function.

`$form.fields`
:	The list of available form fields that can be used as a data source for the section.

The list of fields can be displayed with a section. The section name is not fixed, but we must select the data source for it. Once we are in the list element, we can access the component with `$fields.component`. Then we use the standard component engine features built into OPT to define the form element layout.

The components provide the following parameters:

`$system.component.label`
:	The label set to the element.

`$system.component.description`
:	The extra description set to the element.

`$system.component.name`
:	The element name used by the application.

`$system.component.id`
:	The HTML id attribute value generated by the component.

`$system.component.helperName`
:	The helper name of the element.

The components recognize the following events:

`error`
:	Fired on element validation error. The error messages are available in the `$componentErrors` variable that can be displayed with a section.

The components can manage the attributes of the following tags: `<div>` and `<tr>`. Together with the `formStyleInvalid`, it can be used to change the CSS class of the entire invalid element field:

~~~~
[xml]
{@formStyleInvalid is 'error'}

<opt:component from="$fields.component">
  <com:div>
    
  </com:div>
</opt:component>
~~~~

The port does also support the `opt:component-attributes` attribute introduced in OPT 2.0.2 as an alternative to `com:*` namespace. The recognized attribute value is `error`.

> [information]
> Currently, it is not possible to deploy the form elements statically in the component ports. The support for this feature will be added in the future versions of the port.

Thanks to `@formStyleHELPERNAMEValid` and `@formStyleHELPERNAMEInvalid`, we can configure the CSS classes applied to the element in certain situations.

Using Invenzzia_Form
====================

Once we have a form, we can use it in the controller:

~~~~
[php]

$form = new testForm;
if($_SERVER['REQUEST_METHOD'] == 'POST')
{
	if($form->isValid($_POST))
	{
		// Process the form data here
	}
	else
	{
		$form->setAction('controller=index&action=form');
		$form->populate($_POST);
		$form->assignForm($this->view);
	}
}
else
{
	$form->setAction('controller=index&action=form');
	$form->assignForm($this->view);
}
~~~~

Note that the method to assign a form to the view is called `assignForm()`. Its use is _obligatory_.