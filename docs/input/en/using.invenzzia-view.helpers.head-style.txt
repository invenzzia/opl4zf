Title: headStyle
Construct: helper
SeeAlso:
 - using.invenzzia-view.helpers.head-script

----

Manages the list of the styles loaded by the browser while rendering the page.

Action usage
============

The helper allows the actions to add external and inline styles with a simple interface:

~~~~
[php]
$headStyle = Invenzzia_View_HelperBroker::getInstance()->headStyle;
$headStyle->appendFile('style.css');
$headStyle->appendStyle(' body { color: #ffffff; } ');
~~~~

Similar functions, `prependFile()` and `prependStyle()` prepend the styles to the internal script list making them appear in the first place. The programmer may also use `offsetSetStyle()` and `offsetSetFile()`, where we specify the style order manually:

~~~~
[php]
$headStyle = Invenzzia_View_HelperBroker::getInstance()->headStyle;
$headStyle->appendFile('style1.css');
$headStyle->appendFile('style2.css');
$headStyle->offsetSetFile(1, 'style3.css');

/* produces:
style1.js
style3.js
style2.js
*/
~~~~

If the specified style already exists on the list, it is replaced on the original position, so it is not possible to add the same file twice.

By default, the helper assumes that the registered styles are CSS documents. You can control the content-type of the registered script with the optional, second argument. Another optional argument allows to set extra `<style>` tag attributes:

~~~~
[php]
$headStyle->appendFile('style.css', 'text/css', array('media' => 'screen'));
~~~~

Normally, the helper accepts only the attributes that are allowed by HTML format: `type`, `lang`, `dir`, `media`, `title` and `href` and the others are ignored. However, some pages may use arbitrary attributes for their own purposes. In order to unlock them, you can use the following code:

~~~~
[php]
$headStyle->setAllowArbitraryAttributes(true);
~~~~

Template use
============

On the template-side, you can let the helper to generate the necessary HTML code or take over the control over this process. The template below shows these two cases:

~~~~
[xml]
<head>
  <!-- automatic code generation -->
  {u:$helper.headStyle}
  
  <!-- manual control -->
  <opt:selector name="headStyle">
	<opt:file>
		<link rel="stylesheet" opt:attributes-build="$headStyle.attributes" />
	</opt:file>
	<opt:script>
		<style opt:attributes-build="$headStyle.attributes"><opt:literal type="comment_cdata">
		{u:$headStyle.style}
		</opt:literal></style>
	</opt:script>
  </opt:selector>
</head>
~~~~

With the `opt:attributes-ignore` attribute, you can filter the unwanted attributes on the template-side. For details, see the Open Power Template user manual.

> [error]
> Remember to disable the HTML escaping when displaying the contents of `$helper.headStyle` with the **u:** modifier.

Style groups
=============

Manual control over the script rendering process is not useful for the debug purposes only. The feature that is available only here, are the style groups. Basically speaking, you define the styles to be loaded in the templates and give them simple identifiers. The actions use these identifiers to inform, what style group they want to use:

~~~~
[php]
$headStyle->appendGroup('printable');
~~~~

The template:

~~~~
[xml]
<head>
  <opt:selector name="headStyle">
	<!-- the "printable" group -->
	<opt:printable>
		<link rel="stylesheet" type="text/css" media="print" href="print_structure.css" />
		<link rel="stylesheet" type="text/css" media="print" href="print_format.css" />
	</opt:printable>
	<!-- the standard groups -->
	<opt:file>
		<link rel="stylesheet" opt:attributes-build="$headStyle.attributes" />
	</opt:file>
	<opt:style>
		<style opt:attributes-build="$headStyle.attributes"><opt:literal type="comment_cdata">
		{u:$headStyle.style}
		</opt:literal></style>
	</opt:style>
  </opt:selector>
</head>
~~~~

The groups are defined as items in the selector. Such selector group can be saved into a snippet and reused in various layouts without any problems:

~~~~
[xml]
<?xml version="1.0" ?>
<opt:root>
  <!-- snippets.tpl -->
  <opt:snippet name="headStyleDefinition">
	<!-- the "printable" group -->
	<opt:printable>
		<link rel="stylesheet" type="text/css" media="print" href="print_structure.css" />
		<link rel="stylesheet" type="text/css" media="print" href="print_format.css" />
	</opt:printable>
	<!-- the standard groups -->
	<opt:file>
		<link rel="stylesheet" opt:attributes-build="$headStyleDefinition.attributes" />
	</opt:file>
	<opt:style>
		<style opt:attributes-build="$headStyleDefinition.attributes"><opt:literal type="comment_cdata">
		{u:$headStyleDefinition.style}
		</opt:literal></style>
	</opt:style>
  </opt:snippet>
</opt:root>
~~~~

The layout template:

~~~~
[xml]
<?xml version="1.0" ?>
<opt:root include="snippets.tpl">
<opt:prolog version="1.0" />
<opt:dtd template="xhtml10transitional" />
<html>
  <head>
    <opt:selector name="headStyle" opt:use="headStyleDefinition" />
  </head>
  <!-- ... -->
</html>
</opt:root>
~~~~